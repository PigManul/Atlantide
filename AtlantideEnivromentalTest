print("🚀 Starting Atlantide Ultimate Compatibility Test")
print("🔍 Scanning environment features...")
print("--------------------------------------")

for i = 5, 1, -1 do
    local progress = string.rep("▰", 5-i) .. string.rep("▱", i)
    print("🕒 Initializing... ["..progress.."] ("..i.."s)")
    wait(1)
end

print("\n=== 🔑 Identity Verification ===")
printidentity("🔒 Current security context:")

local success, total = 0, 0
local function testFeature(featureName, func, critical)
    total += 1
    local ok, result = pcall(func)
    local status = ok and "✅" or "❌"
    local details = ""
    
    if ok and result ~= nil then
        details = type(result) == "table" 
            and " ("..#result.." items)" 
            or " ("..tostring(result)..")"
    end
    
    print(string.format("%-25s %-3s %s", featureName, status, details))
    
    if ok then 
        success += 1 
    elseif critical then
        warn("⚠️ Critical feature missing: "..featureName)
    end
end

print("\n=== 🧪 Core Functions ===")
testFeature("Thread Identity", function()
    return getthreadidentity() or getidentity()
end)

testFeature("Executor Identification", function()
    local name, version = identifyexecutor()
    return name.." "..(version or "")
end)

-- Debugging
testFeature("Debug Info", function()
    return debug.getinfo(1)
end)
testFeature("Debug set Constants", function()
	local function test()
		return "fail"
	end
	debug.setconstant(test, 1, "success")
	assert(test() == "success", "debug.setconstant did not set the first constant")
end)
testFeature("Debug Constants", function()
    return debug.getconstants(print)
end)

testFeature("Debug Upvalues", function()
    return debug.getupvalues(debug.getinfo)
end)

testFeature("Garbage Collection", function()
    return #getgc()
end)

testFeature("Instance Tracking", function()
    return #getinstances()
end)

testFeature("Nil Instances", function()
    return #getnilinstances()
end)
testFeature("Cache Invalidation", function()
    local part = Instance.new("Part")
    cache.invalidate(part)
    return not cache.iscached(part)
end)

testFeature("Cryptography", function()
    return crypt.encrypt("test", crypt.generatekey())
end)

testFeature("Clone Reference", function()
    return cloneref(game)
end)


testFeature("Connection Analysis", function()
    local conn = game.Changed.Connect(function() end)
    return #getconnections(conn)
end)

testFeature("Script Decompilation", function()
    getscriptclosure()
end)


testFeature("Drawing Library", function()
    return Drawing.new("Circle")
end)

testFeature("Render Properties", function()
    local circle = Drawing.new("Circle")
    return setrenderproperty(circle, "Color", Color3.new(1,0,0))
end)


testFeature("Raw Metatable", function()
    return getrawmetatable(game)
end)

testFeature("Metatable Hook", function()
    local object = setmetatable({}, { __index = newcclosure(function() return false end), __metatable = "Locked!" })
	local ref = hookmetamethod(object, "__index", function() return true end)
	assert(object.test == true, "Failed to hook a metamethod and change the return value")
	assert(ref() == false, "Did not return the original function")
end)

testFeature("Newc closure", function()
	local function test()
		return true
	end
	local testC = newcclosure(test)
	assert(test() == testC(), "New C closure should return the same value as the original")
	assert(test ~= testC, "New C closure should not be same as the original")
	assert(iscclosure(testC), "New C closure should be a C closure")
    end)
testFeature("File Read/Write", function()
    writefile("test.txt", "success")
    return readfile("test.txt")
end)
testFeature("Is executor closure", function()
	assert(isexecutorclosure(isexecutorclosure) == true, "Did not return true for an executor global")
	assert(isexecutorclosure(newcclosure(function() end)) == true, "Did not return true for an executor C closure")
	assert(isexecutorclosure(function() end) == true, "Did not return true for an executor Luau closure")
	assert(isexecutorclosure(print) == false, "Did not return false for a Roblox global")
end)
testFeature("Isl closure", function()
ssert(islclosure(print) == false, "Function 'print' should not be a Lua closure")
	assert(islclosure(function() end) == true, "Executor function should be a Lua closure")
    end)

testFeature("Directory List", function()
    return listfiles(game:GetService("Players").LocalPlayer.Name)
end)
print("Doing http request, wait please.")
testFeature("HTTP Request", function()
    return request({Url = "https://httpbin.org/get"}).StatusCode
end)
testFeature("lz4 Decompress",function()
	local raw = "Hello, world!"
	local compressed = lz4compress(raw)
	assert(type(compressed) == "string", "Compression did not return a string")
	assert(lz4decompress(compressed, #raw) == raw, "Decompression did not return the original string")
    end)
testFeature("lz4 Compress",function()
	local raw = "Hello, world!"
	local compressed = lz4compress(raw)
	assert(type(compressed) == "string", "Compression did not return a string")
	assert(lz4decompress(compressed, #raw) == raw, "Decompression did not return the original string")
    end)
testFeature("WebSocket", function()
 local types = {
		Send = "function",
		Close = "function",
		OnMessage = {"table", "userdata"},
		OnClose = {"table", "userdata"},
	}
	local ws = WebSocket.connect("ws://echo.websocket.events")
	assert(type(ws) == "table" or type(ws) == "userdata", "Did not return a table or userdata")
	for k, v in pairs(types) do
		if type(v) == "table" then
			assert(table.find(v, type(ws[k])), "Did not return a " .. table.concat(v, ", ") .. " for " .. k .. " (a " .. type(ws[k]) .. ")")
		else
			assert(type(ws[k]) == v, "Did not return a " .. v .. " for " .. k .. " (a " .. type(ws[k]) .. ")")
		end
	end
	ws:Close()
end)


testFeature("Environment Isolation", function()
    return getrenv()._G ~= _G
end)

testFeature("Secure Call", function()
    return checkcaller()
end)


testFeature("Script Context", function()
    return getscriptcontext()
end)




testFeature("UI Library", function()
    return (getgenv().UiLib or getrenv().UiLib) and true
end)

testFeature("Protect GUI", function()
    Instance.new("ScreenGui").Parent = game.CoreGui
end)


testFeature("Function Hook", function()
    	local function test()
		return true
	end
	local ref = hookfunction(test, function()
		return false
	end)
	assert(test() == false, "Function should return false")
	assert(ref() == true, "Original function should return true")
	assert(test ~= ref, "Original function should not be same as the reference")
end)

testFeature("Namecall Hook", function()
    local method
	local ref
	ref = hookmetamethod(game, "__namecall", function(...)
		if not method then
			method = getnamecallmethod()
		end
		return ref(...)
	end)
	game:GetService("Lighting")
	assert(method == "GetService", "Did not get the correct method (GetService)")
end)


testFeature("FPS Control", function()
    setfpscap(60)
    return getfpscap()
end)
testFeature("Bytecode Analysis", function()
    local bytecode = getscriptbytecode(game:GetService("Players"))
    return #bytecode > 1024
end)

testFeature("Decompiler", function()
    return decompile(print) ~= nil
end)



testFeature("Click Detector", function()
    Instance.new("ClickDetector").Parent = game.workspace.fireclickdetector()
    return fireclickdetector()
end)
testFeature("Fire Signal", function()
    firesignal()
    return firesignal()
end)

print("\n=== 📊 Comprehensive Results ===")
local compatibility = math.floor((success/total)*100)
local rating = string.rep("★", math.floor(compatibility/20)) .. string.rep("☆", 5 - math.floor(compatibility/20))

print(string.format([[
📈 Compatibility Score: %d%%
🌟 Performance Rating: %s]], 
compatibility,
math.floor(compatibility * 0.95),
rating))

if compatibility == 100 then
    print("\n🎉 Perfect Compatibility Detected!")
    print("🔥 All systems operational at peak performance")
else
    print("If your score more than 50 (Perf. Rating and Compability Score) then thats good!Thats not mean executor are bad but its too hard to do 100%!")
end

print("\n"..string.rep("═", 40))
warn("// Atlantide System Report: "..compatibility.."% compliance //")
