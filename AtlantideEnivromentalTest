print("üöÄ Starting Atlantide Ultimate Compatibility Test")
print("üîç Scanning environment features...")
print("--------------------------------------")

for i = 5, 1, -1 do
    local progress = string.rep("‚ñ∞", 5-i) .. string.rep("‚ñ±", i)
    print("üïí Initializing... ["..progress.."] ("..i.."s)")
    wait(1)
end

print("\n=== üîë Identity Verification ===")
printidentity("üîí Current security context:")

local success, total = 0, 0
local function testFeature(featureName, func, critical)
    total += 1
    local ok, result = pcall(func)
    local status = ok and "‚úÖ" or "‚ùå"
    local details = ""
    
    if ok and result ~= nil then
        details = type(result) == "table" 
            and " ("..#result.." items)" 
            or " ("..tostring(result)..")"
    end
    
    print(string.format("%-25s %-3s %s", featureName, status, details))
    
    if ok then 
        success += 1 
    elseif critical then
        warn("‚ö†Ô∏è Critical feature missing: "..featureName)
    end
end

-- Core Script Functions
print("\n=== üß† Core System Features ===")
testFeature("Thread Identity", function()
    return getthreadidentity() or getidentity()
end)

testFeature("Executor Identification", function()
    local name, version = identifyexecutor()
    return name.." "..(version or "")
end)

testFeature("Debug Info", function()
    return debug.getinfo(1)
end)

testFeature("Debug Constants", function()
    return debug.getconstants(print)
end)

testFeature("Debug Upvalues", function()
    return debug.getupvalues(debug.getinfo)
end)

testFeature("Garbage Collection", function()
    return #getgc()
end)

testFeature("Instance Tracking", function()
    return #getinstances()
end)

testFeature("Nil Instances", function()
    assert(getnilinstances()[1]:IsA("Instance"), "The first value is not an Instance")
    assert(getnilinstances()[1].Parent == nil, "The first value is not parented to nil")
end)

testFeature("Cache Invalidation", function()
    local part = Instance.new("Part")
    cache.invalidate(part)
    return not cache.iscached(part)
end)

testFeature("Clone Reference", function()
    return cloneref(game)
end)

testFeature("Connection Analysis", function()
    local conn = game.Changed.Connect(function() end)
    return #getconnections(conn)
end)

testFeature("SetScriptable", function()
    local fire = Instance.new("Fire")
    local wasScriptable = setscriptable(fire, "size_xml", true)
    assert(wasScriptable == false, "Did not return false for a non-scriptable property (size_xml)")
    assert(isscriptable(fire, "size_xml") == true, "Did not set the scriptable property")
    fire = Instance.new("Fire")
    assert(isscriptable(fire, "size_xml") == false, "‚ö†Ô∏è‚ö†Ô∏è setscriptable persists between unique instances ‚ö†Ô∏è‚ö†Ô∏è")
end)

testFeature("Script Decompilation", function()
    getscriptclosure()
end)

testFeature("Environment Isolation", function()
    return getrenv()._G ~= _G
end)

testFeature("Secure Call", function()
    return checkcaller()
end)

testFeature("Script Context", function()
    return getscriptcontext()
end)

testFeature("SetThreadIdentity",function()
    setthreadidentity(3)
    assert(getthreadidentity() == 3, "Did not set the thread identity")
end)

-- Hooks and Metatables
print("\n=== ü™ù Hooks System ===")
testFeature("SetRawMetatable", function()
    local object = setmetatable({}, { __index = function() return false end, __metatable = "Locked!" })
    local objectReturned = setrawmetatable(object, { __index = function() return true end })
    assert(object, "Did not return the original object")
    assert(object.test == true, "Failed to change the metatable")
    if objectReturned then
        return objectReturned == object and "Returned the original object" or "Did not return the original object"
    end
end)

testFeature("Metatable Hook", function()
    local object = setmetatable({}, { __index = newcclosure(function() return false end), __metatable = "Locked!" })
    local ref = hookmetamethod(object, "__index", function() return true end)
    assert(object.test == true, "Failed to hook a metamethod and change the return value")
    assert(ref() == false, "Did not return the original function")
end)

testFeature("Function Hook", function()
    local function test()
        return true
    end
    local ref = hookfunction(test, function()
        return false
    end)
    assert(test() == false, "Function should return false")
    assert(ref() == true, "Original function should return true")
    assert(test ~= ref, "Original function should not be same as the reference")
end)

testFeature("Namecall Hook", function()
    local method
    local ref
    ref = hookmetamethod(game, "__namecall", function(...)
        if not method then
            method = getnamecallmethod()
        end
        return ref(...)
    end)
    game:GetService("Lighting")
    assert(method == "GetService", "Did not get the correct method (GetService)")
end)

-- External Services
print("\n=== üåê External Services ===")
testFeature("Cryptography", function()
    return crypt.encrypt("test", crypt.generatekey())
end)

testFeature("File Read/Write", function()
    writefile("test.txt", "success")
    return readfile("test.txt")
end)

testFeature("Directory List", function()
    return listfiles(game:GetService("Players").LocalPlayer.Name)
end)

testFeature("HTTP Request", function()
    return request({Url = "https://httpbin.org/get"}).StatusCode
end)

testFeature("lz4 Decompress",function()
    local raw = "Hello, world!"
    local compressed = lz4compress(raw)
    assert(type(compressed) == "string", "Compression did not return a string")
    assert(lz4decompress(compressed, #raw) == raw, "Decompression did not return the original string")
end)

testFeature("lz4 Compress",function()
    local raw = "Hello, world!"
    local compressed = lz4compress(raw)
    assert(type(compressed) == "string", "Compression did not return a string")
    assert(lz4decompress(compressed, #raw) == raw, "Decompression did not return the original string")
end)

testFeature("WebSocket", function()
    local types = {
        Send = "function",
        Close = "function",
        OnMessage = {"table", "userdata"},
        OnClose = {"table", "userdata"},
    }
    local ws = WebSocket.connect("ws://echo.websocket.events")
    assert(type(ws) == "table" or type(ws) == "userdata", "Did not return a table or userdata")
    for k, v in pairs(types) do
        if type(v) == "table" then
            assert(table.find(v, type(ws[k])), "Did not return a " .. table.concat(v, ", ") .. " for " .. k .. " (a " .. type(ws[k]) .. ")")
        else
            assert(type(ws[k]) == v, "Did not return a " .. v .. " for " .. k .. " (a " .. type(ws[k]) .. ")")
        end
    end
    ws:Close()
end)

-- UI and Drawing
print("\n=== üé® UI System ===")
testFeature("Drawing Library", function()
    local drawing = Drawing.new("Square")
    drawing.Visible = false
    local canDestroy = pcall(function()
        drawing:Destroy()
    end)
    assert(canDestroy, "Drawing:Destroy() should not throw an error")
end)

testFeature("Drawing Fonts", function()
    assert(Drawing.Fonts.UI == 0, "Did not return the correct id for UI")
    assert(Drawing.Fonts.System == 1, "Did not return the correct id for System")
    assert(Drawing.Fonts.Plex == 2, "Did not return the correct id for Plex")
    assert(Drawing.Fonts.Monospace == 3, "Did not return the correct id for Monospace")
end)

testFeature("UI Library", function()
    return (getgenv().UiLib or getrenv().UiLib) and true
end)

testFeature("Protect GUI", function()
    Instance.new("ScreenGui").Parent = game.CoreGui
end)

testFeature("GetHui",function()
    assert(typeof(gethui()) == "Instance", "Did not return an Instance")
end)

-- Utilities
print("\n=== ‚öôÔ∏è System Utilities ===")
testFeature("FPS Control", function()
    setfpscap(60)
    return getfpscap()
end)

testFeature("Decompiler", function()
    return decompile(print) ~= nil
end)

testFeature("Click Detector", function()
    local detector = Instance.new("ClickDetector")
    fireclickdetector(detector, 50, "MouseHoverEnter")
end)

testFeature("Fire Signal", function()
    firesignal()
    return firesignal()
end)

print("\n=== üìä Comprehensive Results ===")
local compatibility = math.floor((success/total)*100)
local rating = string.rep("‚òÖ", math.floor(compatibility/20)) .. string.rep("‚òÜ", 5 - math.floor(compatibility/20))

print(string.format([[
üìà Compatibility Score: %d%%
üåü Performance Rating: %s]], 
compatibility,
math.floor(compatibility * 0.95),
rating))

if compatibility == 100 then
    print("\nüéâ Perfect Compatibility Detected!")
    print("üî• All systems operational at peak performance")
else
    print("If your score more than 50 (Perf. Rating and Compability Score) then thats good!Thats not mean executor are bad but its too hard to do 100%!")
end

print("\n"..string.rep("‚ïê", 40))
warn("// Atlantide System Report: "..compatibility.."% compliance //")
